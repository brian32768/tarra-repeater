; This file is managed in Ansible, changes here will be lost on next reload.
; Edit the version in fogg-ansible and re-provision.
; --------------------------------------------------------------------------

;  This handles the PARK buttons on the Grandstream sidecar.
;
;  If you are in a call, you can push a PARK button to push the
;  caller into a GREEN parking space, and that button will turn RED
;
;  If there is a parked call, you can push the RED button
;  to pick up the call.
;
;  If you just push a GREEN park button when not in a call,
;  Allison will chastise you and hang up.
;
;  From other phones, parking areas are on extensions 701-708.
;
[valet-parking]

; If you add more parking spaces, you must
;  1. add more hints
;  2. change the pattern for the extensions

exten => 701,hint,park:701@parkedcalls
exten => 702,hint,park:702@parkedcalls
exten => 703,hint,park:703@parkedcalls
exten => 704,hint,park:704@parkedcalls
exten => 705,hint,park:705@parkedcalls
exten => 706,hint,park:706@parkedcalls
exten => 707,hint,park:707@parkedcalls
exten => 708,hint,park:708@parkedcalls

; This is for direct park retrieval -- best if use with a "prefix" DSS key bound to '**'.
; We don't really need it for the phones we're using. Just dial 701-708
;exten => _**70[12345678],1,NoOP(Pick up call parked at ${EXTEN})
; same => n,ParkedCall(default,${EXTEN:2})
; same => n,Hangup()

; When I push an MPK "Park" button, it dials an extension 701-708
exten => _70[12345678],1,NoOp(Parking lot ${EXTEN})

; These global variables are used by the Park() and ParkedCall() applications.
 same => n,Set(PARKINGEXTEN=${EXTEN})
 same => n,Set(PARKINGLOT=default)
 ; Context "parkedcalls" has to match what you put in res_parking.conf
 same => n,Set(PARKINGSPACE=park:${PARKINGEXTEN}@parkedcalls)

 same => n,NoOP(PARKING SPACE ${PARKINGSPACE} State: ${DEVICE_STATE(${PARKINGSPACE})})

;If the parking space is not in use, goto PARK.  
 same => n,GotoIf($[${DEVICE_STATE(${PARKINGSPACE})}=NOT_INUSE]?PARK)
 
 ; Else, goto PICKUP
 same => n,NoOP(Recalling from parking space ${PARKINGEXTEN} (BLINDTRANSFER=${BLINDTRANSFER}))

; This code had a comment on returning it to whomever transferred it... not sure what to do here... so I ignore it for now.
;same => n,GotoIf($[ "${BLINDTRANSFER:4:3}" = "" ] ?PICKUP)
; same => n,NoOP(Transfering call sending back to: ${BLINDTRANSFER} ----> local/${BLINDTRANSFER:4:3}@local-extensions )
; same => n,Dial(local/${BLINDTRANSFER:4:3}@local-extensions,,tr)
; same => n,Hangup()

; ---------------- Pick up a parked call ----------------

same => n(PICKUP),NoOP(Pick up parking space: ${PARKINGEXTEN})
 ; It would be nice if the callerid was correct here, oh well
 same => n,ParkedCall(,${PARKINGEXTEN})
 same => n,Hangup()
 
; --------------------- Park a call ---------------------

 same => n(PARK),NoOp(Channel state ${CHANNEL(state)})

; Okay, this slot is open, but if I am not in a call, does it make sense to park myself? NO!
; If I see "Ring" as the channel state, then I use that to detect there is no call.
 same => n,GotoIf($[${CHANNEL(state)}=Ring]?INVALID)

 same => n,NoOp(Park this call in parking lot "${PARKINGLOT}", space ${PARKINGEXTEN})
 same => n,Park(,,s) ; yes I am using GLOBALS!
 same => n,Hangup()

 same => n(INVALID),Playback(pbx-invalidpark) ; "I am sorry there is no call parked..."
 same => n,Hangup()

; this context is defined in subscribecontext in sippeers table.
[phones]

; This makes BLF lights work for the PARK buttons in MPK's
include => parkedcalls  

; That's all!
